From 719537fd1a662c7e86374e753084d161df3f43f3 Mon Sep 17 00:00:00 2001
From: Firoz Khan <firoz.khan@linaro.org>
Date: Mon, 5 Nov 2018 11:00:03 +0530
Subject: [PATCH v2 1/5] mips: add __NR_syscalls along with __NR_Linux_syscalls

__NR_Linux_syscalls macro holds the number of system call
exist in mips architecture. We have to change the value of
__NR_Linux_syscalls, if we add or delete a system call.

One of the patch in this patch series has a script which
will generate a uapi header based on syscall.tbl file.
The syscall.tbl file contains the total number of system
calls information. So we have two option to update __NR-
_Linux_syscalls value.

1. Update __NR_Linux_syscalls in asm/unistd.h manually
   by counting the no.of system calls. No need to update
   __NR_Linux_syscalls until we either add a new system
   call or delete existing system call.

2. We can keep this feature it above mentioned script,
   that will count the number of syscalls and keep it in
   a generated file. In this case we don't need to expli-
   citly update __NR_Linux_syscalls in asm/unistd.h file.

The 2nd option will be the recommended one. For that, I
added the __NR_syscalls macro in uapi/asm/unistd.h along
with __NR_Linux_syscalls asm/unistd.h. The macro __NR_-
syscalls also added for making the name convention same
across all architecture. While __NR_syscalls isn't stri-
ctly part of the uapi, having it as part of the generated
header to simplifies the implementation. We also need to
enclose this macro with #ifdef __KERNEL__ to avoid side
effects.

Signed-off-by: Firoz Khan <firoz.khan@linaro.org>
---
 arch/mips/include/asm/unistd.h      | 18 ++++++++++++++++++
 arch/mips/include/uapi/asm/unistd.h | 22 +++++++++-------------
 2 files changed, 27 insertions(+), 13 deletions(-)

diff --git a/arch/mips/include/asm/unistd.h b/arch/mips/include/asm/unistd.h
index c68b8ae..191dda8 100644
--- a/arch/mips/include/asm/unistd.h
+++ b/arch/mips/include/asm/unistd.h
@@ -14,6 +14,24 @@
 
 #include <uapi/asm/unistd.h>
 
+#if _MIPS_SIM == _MIPS_SIM_ABI32
+#define __NR_Linux_syscalls		__NR_syscalls
+#endif /* _MIPS_SIM == _MIPS_SIM_ABI32 */
+#define __NR_O32_Linux			__NR_Linux
+#define __NR_O32_Linux_syscalls		__NR_syscalls
+
+#if _MIPS_SIM == _MIPS_SIM_ABI64
+#define __NR_Linux_syscalls		__NR_syscalls
+#endif /* _MIPS_SIM == _MIPS_SIM_ABI64 */
+#define __NR_64_Linux			__NR_Linux
+#define __NR_64_Linux_syscalls		__NR_syscalls
+
+#if _MIPS_SIM == _MIPS_SIM_NABI32
+#define __NR_Linux_syscalls		__NR_syscalls
+#endif /* _MIPS_SIM == _MIPS_SIM_NABI32 */
+#define __NR_N32_Linux			__NR_Linux
+#define __NR_N32_Linux_syscalls		__NR_syscalls
+
 #ifdef CONFIG_MIPS32_N32
 #define NR_syscalls  (__NR_N32_Linux + __NR_N32_Linux_syscalls)
 #elif defined(CONFIG_64BIT)
diff --git a/arch/mips/include/uapi/asm/unistd.h b/arch/mips/include/uapi/asm/unistd.h
index f25dd1d..d9b26d1 100644
--- a/arch/mips/include/uapi/asm/unistd.h
+++ b/arch/mips/include/uapi/asm/unistd.h
@@ -391,17 +391,15 @@
 #define __NR_rseq			(__NR_Linux + 367)
 #define __NR_io_pgetevents		(__NR_Linux + 368)
 
-
 /*
  * Offset of the last Linux o32 flavoured syscall
  */
-#define __NR_Linux_syscalls		368
+#ifdef __KERNEL__
+#define __NR_syscalls			368
+#endif
 
 #endif /* _MIPS_SIM == _MIPS_SIM_ABI32 */
 
-#define __NR_O32_Linux			4000
-#define __NR_O32_Linux_syscalls		368
-
 #if _MIPS_SIM == _MIPS_SIM_ABI64
 
 /*
@@ -741,13 +739,12 @@
 /*
  * Offset of the last Linux 64-bit flavoured syscall
  */
-#define __NR_Linux_syscalls		328
+#ifdef __KERNEL__
+#define __NR_syscalls			328
+#endif
 
 #endif /* _MIPS_SIM == _MIPS_SIM_ABI64 */
 
-#define __NR_64_Linux			5000
-#define __NR_64_Linux_syscalls		328
-
 #if _MIPS_SIM == _MIPS_SIM_NABI32
 
 /*
@@ -1091,11 +1088,10 @@
 /*
  * Offset of the last N32 flavoured syscall
  */
-#define __NR_Linux_syscalls		332
+#ifdef __KERNEL__
+#define __NR_syscalls			332
+#endif
 
 #endif /* _MIPS_SIM == _MIPS_SIM_NABI32 */
 
-#define __NR_N32_Linux			6000
-#define __NR_N32_Linux_syscalls		332
-
 #endif /* _UAPI_ASM_UNISTD_H */
-- 
1.9.1

