From 50fef607ac81a17ca2ce6971875d0ce0f8808c7a Mon Sep 17 00:00:00 2001
From: Firoz Khan <firoz.khan@linaro.org>
Date: Tue, 19 Feb 2019 17:35:47 +0530
Subject: [PATCH 21/27] riscv: generate uapi and kapi headers

Unified system call table generation script need to be invoked
to generated the uapi and kapi headers. The Makefile changes
present in this patch will invoke the scripts and generate uapi
and kapi header files.

The generated files - unistd_*.h and syscall_table_*.h files
will be included by unistd.h and sys_c6x.c files by replacing
asm-generic/unistd.h file.

Signed-off-by: Firoz Khan <firoz.khan@linaro.org>
---
 arch/riscv/Makefile                  | 3 +++
 arch/riscv/include/asm/Kbuild        | 1 +
 arch/riscv/include/asm/unistd.h      | 4 ++++
 arch/riscv/include/uapi/asm/Kbuild   | 2 ++
 arch/riscv/include/uapi/asm/unistd.h | 7 ++++---
 arch/riscv/kernel/syscall_table.c    | 3 ++-
 6 files changed, 16 insertions(+), 4 deletions(-)

diff --git a/arch/riscv/Makefile b/arch/riscv/Makefile
index 4b594f2..b387129 100644
--- a/arch/riscv/Makefile
+++ b/arch/riscv/Makefile
@@ -95,3 +95,6 @@ Image.%: Image
 
 zinstall install:
 	$(Q)$(MAKE) $(build)=$(boot) $@
+
+archheaders:
+	$(Q)$(MAKE) $(build)=arch/riscv/kernel/syscalls all
diff --git a/arch/riscv/include/asm/Kbuild b/arch/riscv/include/asm/Kbuild
index cccd12c..a3b9b91 100644
--- a/arch/riscv/include/asm/Kbuild
+++ b/arch/riscv/include/asm/Kbuild
@@ -1,3 +1,4 @@
+generated-y += syscall_table.h
 generic-y += bugs.h
 generic-y += checksum.h
 generic-y += compat.h
diff --git a/arch/riscv/include/asm/unistd.h b/arch/riscv/include/asm/unistd.h
index fef96f1..f2c7da1 100644
--- a/arch/riscv/include/asm/unistd.h
+++ b/arch/riscv/include/asm/unistd.h
@@ -18,4 +18,8 @@
 
 #define __ARCH_WANT_SYS_CLONE
 
+#ifndef __SYSCALL
+#define __SYSCALL(x, y)
+#endif
+
 #include <uapi/asm/unistd.h>
diff --git a/arch/riscv/include/uapi/asm/Kbuild b/arch/riscv/include/uapi/asm/Kbuild
index d2ee86b..439f515 100644
--- a/arch/riscv/include/uapi/asm/Kbuild
+++ b/arch/riscv/include/uapi/asm/Kbuild
@@ -1 +1,3 @@
 include include/uapi/asm-generic/Kbuild.asm
+
+generated-y += unistd_32.h
diff --git a/arch/riscv/include/uapi/asm/unistd.h b/arch/riscv/include/uapi/asm/unistd.h
index 1f3bd3e..a356be3 100644
--- a/arch/riscv/include/uapi/asm/unistd.h
+++ b/arch/riscv/include/uapi/asm/unistd.h
@@ -19,7 +19,9 @@
 #define __ARCH_WANT_NEW_STAT
 #endif /* __LP64__ */
 
-#include <asm-generic/unistd.h>
+#include <asm/bitsperlong.h>
+
+#include <asm/unistd_32.h>
 
 /*
  * Allows the instruction cache to be flushed from userspace.  Despite RISC-V
@@ -36,6 +38,5 @@
  * in there for forwards compatibility.
  */
 #ifndef __NR_riscv_flush_icache
-#define __NR_riscv_flush_icache (__NR_arch_specific_syscall + 15)
+#define __NR_riscv_flush_icache	__NR_arch_specific_syscall15
 #endif
-__SYSCALL(__NR_riscv_flush_icache, sys_riscv_flush_icache)
diff --git a/arch/riscv/kernel/syscall_table.c b/arch/riscv/kernel/syscall_table.c
index ade52b9..31b9180 100644
--- a/arch/riscv/kernel/syscall_table.c
+++ b/arch/riscv/kernel/syscall_table.c
@@ -22,5 +22,6 @@
 
 void *sys_call_table[__NR_syscalls] = {
 	[0 ... __NR_syscalls - 1] = sys_ni_syscall,
-#include <asm/unistd.h>
+#define sys_arch_specific_syscall15	sys_riscv_flush_icache
+#include <asm/syscall_table.h>
 };
-- 
1.9.1

