From 6cb1e913545c40cf11fcee08367a8ed0bbcbbed8 Mon Sep 17 00:00:00 2001
From: Firoz Khan <firozk@codeaurora.org>
Date: Mon, 7 Jan 2019 21:06:15 +0530
Subject: [PATCH] nds32: asm-generic

---
 arch/nds32/Makefile                  |  3 +++
 arch/nds32/include/asm/Kbuild        |  1 +
 arch/nds32/include/uapi/asm/Kbuild   |  1 +
 arch/nds32/include/uapi/asm/unistd.h | 21 +++++++++++-------
 arch/nds32/kernel/syscall_table.c    |  9 +++++---
 arch/nds32/kernel/syscalls/Makefile  | 41 ++++++++++++++++++++++++++++++++++++
 6 files changed, 65 insertions(+), 11 deletions(-)
 create mode 100644 arch/nds32/kernel/syscalls/Makefile

diff --git a/arch/nds32/Makefile b/arch/nds32/Makefile
index 0a935c1..681185c 100644
--- a/arch/nds32/Makefile
+++ b/arch/nds32/Makefile
@@ -74,6 +74,9 @@ CLEAN_FILES += include/asm-nds32/constants.h*
 archclean:
 	$(Q)$(MAKE) $(clean)=$(boot)
 
+archheaders:
+	$(Q)$(MAKE) $(build)=arch/nds32/kernel/syscalls all
+
 define archhelp
   echo  '  Image         - kernel image (arch/$(ARCH)/boot/Image)'
 endef
diff --git a/arch/nds32/include/asm/Kbuild b/arch/nds32/include/asm/Kbuild
index 64ceff7..6582d88 100644
--- a/arch/nds32/include/asm/Kbuild
+++ b/arch/nds32/include/asm/Kbuild
@@ -1,3 +1,4 @@
+generated-y += syscall_table.h
 generic-y += asm-offsets.h
 generic-y += atomic.h
 generic-y += bitops.h
diff --git a/arch/nds32/include/uapi/asm/Kbuild b/arch/nds32/include/uapi/asm/Kbuild
index c1b06dc..3f03cf6 100644
--- a/arch/nds32/include/uapi/asm/Kbuild
+++ b/arch/nds32/include/uapi/asm/Kbuild
@@ -1,3 +1,4 @@
 include include/uapi/asm-generic/Kbuild.asm
 
+generated-y += unistd_32.h
 generic-y += ucontext.h
diff --git a/arch/nds32/include/uapi/asm/unistd.h b/arch/nds32/include/uapi/asm/unistd.h
index c2c3a3e..4af1eaa 100644
--- a/arch/nds32/include/uapi/asm/unistd.h
+++ b/arch/nds32/include/uapi/asm/unistd.h
@@ -4,11 +4,16 @@
 #define __ARCH_WANT_STAT64
 #define __ARCH_WANT_SYNC_FILE_RANGE2
 
-/* Use the standard ABI for syscalls */
-#include <asm-generic/unistd.h>
-
-/* Additional NDS32 specific syscalls. */
-#define __NR_cacheflush		(__NR_arch_specific_syscall)
-#define __NR_udftrap		(__NR_arch_specific_syscall + 1)
-__SYSCALL(__NR_cacheflush, sys_cacheflush)
-__SYSCALL(__NR_udftrap, sys_udftrap)
+#include <asm/bitsperlong.h>
+
+#ifndef __SYSCALL
+#define __SYSCALL(x, y)
+#endif
+
+#if __BITS_PER_LONG == 32
+#define __NR_sync_file_range2	__NR_sync_file_range /* TODO Create a seperate patch by change in asm-generic/unistd.h file */
+#undef __NR_sync_file_range
+#define __NR_cacheflush		__NR_arch_specific_syscall0
+#define __NR_udftrap		__NR_arch_specific_syscall1
+#include <asm/unistd_32.h>
+#endif
diff --git a/arch/nds32/kernel/syscall_table.c b/arch/nds32/kernel/syscall_table.c
index 7879c06..08d1e6e 100644
--- a/arch/nds32/kernel/syscall_table.c
+++ b/arch/nds32/kernel/syscall_table.c
@@ -9,9 +9,12 @@
 #undef __SYSCALL
 #define __SYSCALL(nr, call) [nr] = (call),
 
-#define sys_rt_sigreturn sys_rt_sigreturn_wrapper
-#define sys_fadvise64_64 sys_fadvise64_64_wrapper
+#define sys_sync_file_range	sys_sync_file_range2 /* TODO Create a seperate patch by change in asm-generic/unistd.h file */
+#define sys_rt_sigreturn	sys_rt_sigreturn_wrapper
+#define sys_fadvise64_64	sys_fadvise64_64_wrapper
 void *sys_call_table[__NR_syscalls] __aligned(8192) = {
 	[0 ... __NR_syscalls - 1] = sys_ni_syscall,
-#include <asm/unistd.h>
+#define sys_arch_specific_syscall0	sys_cacheflush
+#define sys_arch_specific_syscall1	sys_udftrap
+#include <asm/syscall_table.h>
 };
diff --git a/arch/nds32/kernel/syscalls/Makefile b/arch/nds32/kernel/syscalls/Makefile
new file mode 100644
index 0000000..1865a80
--- /dev/null
+++ b/arch/nds32/kernel/syscalls/Makefile
@@ -0,0 +1,41 @@
+# SPDX-License-Identifier: GPL-2.0
+kapi := arch/$(SRCARCH)/include/generated/asm
+uapi := arch/$(SRCARCH)/include/generated/uapi/asm
+
+_dummy := $(shell [ -d '$(uapi)' ] || mkdir -p '$(uapi)')	\
+	  $(shell [ -d '$(kapi)' ] || mkdir -p '$(kapi)')
+
+syscall := $(srctree)/scripts/syscalls/syscall.tbl
+syshdr := $(srctree)/scripts/syscallhdr.sh
+systbl := $(srctree)/scripts/syscalltbl.sh
+
+quiet_cmd_syshdr = SYSHDR  $@
+      cmd_syshdr = $(CONFIG_SHELL) '$(syshdr)' '$<' '$@'	\
+		   '$(syshdr_abis_$(basetarget))'		\
+		   '$(syshdr_pfx_$(basetarget))'		\
+		   '$(syshdr_offset_$(basetarget))'
+
+quiet_cmd_systbl = SYSTBL  $@
+      cmd_systbl = $(CONFIG_SHELL) '$(systbl)' '$<' '$@'	\
+		   '$(systbl_abis_$(basetarget))'		\
+		   '$(systbl_abi_$(basetarget))'		\
+		   '$(systbl_offset_$(basetarget))'
+
+syshdr_abis_unistd_32 := common,32,rename,stat64,archs0
+$(uapi)/unistd_32.h: $(syscall) $(syshdr)
+	$(call if_changed,syshdr)
+
+systbl_abis_syscall_table := common,32,rename,stat64,archs0
+systbl_abi_syscall_table := 32
+$(kapi)/syscall_table.h: $(syscall) $(systbl)
+	$(call if_changed,systbl)
+
+uapisyshdr-y		+= unistd_32.h
+kapisyshdr-y		+= syscall_table.h
+
+targets	+= $(uapisyshdr-y) $(kapisyshdr-y)
+
+PHONY += all
+all: $(addprefix $(uapi)/,$(uapisyshdr-y))
+all: $(addprefix $(kapi)/,$(kapisyshdr-y))
+	@:
-- 
1.9.1

